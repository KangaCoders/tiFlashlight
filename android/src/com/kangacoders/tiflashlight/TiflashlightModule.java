/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2013 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package com.kangacoders.tiflashlight;

import java.util.List;

import org.appcelerator.kroll.KrollModule;
import org.appcelerator.kroll.annotations.Kroll;

import org.appcelerator.titanium.TiApplication;
import org.appcelerator.kroll.common.Log;
import org.appcelerator.kroll.common.TiConfig;

import ti.modules.titanium.media.TiCamera;

import android.app.Activity;
import android.content.pm.PackageManager;
import android.hardware.Camera;
import android.hardware.Camera.Parameters;

@Kroll.module(name="Tiflashlight", id="com.kangacoders.tiflashlight")
public class TiflashlightModule extends KrollModule
{

	// Standard Debugging variables
	private static final String TAG = "TiflashlightModule";
	private static final boolean DBG = TiConfig.LOGD;
    protected Camera camera;
    protected Parameters params;
    public boolean torchIsOn = false;

    public TiflashlightModule() {
        super();
    }

    @Kroll.onAppCreate
    public static void onAppCreate(TiApplication app) {
        // put module init code that needs to run when the application is created
        if (DBG) {
            Log.d(TAG, "Napp Flashlight init");
        }
    }
    
    @Override
    public void onStop(Activity activity) {
        super.onStop(activity);
        turnFlashLightOff();
    }

    @Override
    public void onPause(Activity activity) {
        super.onPause(activity);
        turnFlashLightOff();
    }

    // Methods
    @Kroll.method
    public boolean isFlashLightSupported() {
        if (DBG) {
            Log.d(TAG, "isFlashLightSupported");
        }

        Activity activity = TiApplication.getAppRootOrCurrentActivity();

        boolean hasSystemFeature = activity.getPackageManager().hasSystemFeature(PackageManager.FEATURE_CAMERA_FLASH);

        if (hasSystemFeature) {
            camera = openCamera();
            List<String> supportedFlashModes = camera.getParameters().getSupportedFlashModes();
            if (supportedFlashModes == null
                    || (supportedFlashModes.size() == 1 && supportedFlashModes.get(0).equals("off"))) {
                hasSystemFeature = false;
            }
            camera.release();
            camera = null;
        }

        return hasSystemFeature;
    }

    @Kroll.method
    public boolean isFlashLightOn() {
        if (DBG) {
            Log.d(TAG, "isFlashLightOn");
        }
        return torchIsOn;
    }

    @Kroll.method
    public void turnFlashLightOn() {
        if (DBG) {
            Log.d(TAG, "turnFlashLightOn");
        }
        if (!torchIsOn) {
            camera = openCamera();
            params = camera.getParameters();

            params.setFlashMode(Parameters.FLASH_MODE_TORCH);
            camera.setParameters(params);
            camera.startPreview();
            torchIsOn = true;
        }
    }

    @Kroll.method
    public void turnFlashLightOff() {
        if (DBG) {
            Log.d(TAG, "turnFlashLightOff");
        }
        if (torchIsOn) {
            params = camera.getParameters();
            params.setFlashMode(Parameters.FLASH_MODE_OFF);

            camera.setParameters(params);
            camera.stopPreview();
            camera.release();
            torchIsOn = false;
        }
    }

    @Kroll.method
    public void toggleFlashLight() {
        if (DBG) {
            Log.d(TAG, "toggleFlashLight");
        }
        if (torchIsOn) {
            this.turnFlashLightOff();
        } else {
            this.turnFlashLightOn();
        }
    }
    
    private Camera openCamera(){
    	TiCamera _camera = new TiCamera();
    	camera = _camera.getCamera();
    	
    	return camera;
    }
}
